#!/usr/bin/env bash php

<?php

/**
 * This script uses the main.asset.php generated by the app to resolve it's WordPress dependencies
 * and produce a list of wp- packages in the order in which they need to be loaded into the browser.
 */

define( 'ROOT_DIR', dirname( dirname( __FILE__ ) ) );

define( 'APPS_DIR', ROOT_DIR . '/apps/' );
define( 'BUILD_DIR', ROOT_DIR . '/dist/' );
define( 'GUTENBERG_BUILD_DIR', ROOT_DIR . '/lib/gutenberg/build/' );

// List of apps compiled using the WP environment setting - omitting all Gutenberg dependencies and some major libraries.
const APPS = [
	'dashboard',
];

/**
 * Simplify the asset list to only contain WordPress packages
 * and remove `wp-` prefix from the package name so it matches the directory name.
 *
 * @param  array $assets
 * @return array
 */
function simplify_assets( array $assets ) {
	return array_map(
		function ( $asset ) {
			return substr( $asset, 3 );
		},
		array_filter(
			$assets[ 'dependencies' ],
			function ( $asset ) {
				return strpos( $asset, 'wp-' ) === 0 && $asset !== 'wp-polyfill';
			}
		)
	);
}

function get_app_assets( $app_name ) {
	return simplify_assets( include APPS_DIR . $app_name . '/dist/main.asset.php' );
}

function get_package_assets( $package_name ) {
	return simplify_assets( include GUTENBERG_BUILD_DIR . $package_name . '/index.min.asset.php' );
}

function resolve_wp_dependencies( $assets ) {
	$unresolved = $assets;
	$resolved = [];

	while ( ! empty( $unresolved ) ) {
		$package = $unresolved[ 0 ];
		$dependencies = get_package_assets( $package );

		$insertAt = array_reduce(
			$dependencies,
			function ( $index, $dependency ) use ( $resolved ) {
				$nextIndex = array_search( $dependency, $resolved );

				return $nextIndex === false ? $index : max( $index, $nextIndex + 1 );
			},
			0
		);

		array_splice( $resolved, $insertAt, 0, $package );

		$unresolved = [ ...array_filter(
			array_unique( array_merge( $unresolved, get_package_assets( $package ) ) ),
			function ( $pkg ) use ( $resolved ) {
				return array_search( $pkg, $resolved ) === false;
			}
		) ];
	}

	return $resolved;
}

$unresolved_dependencies = array_unique( array_reduce( array_map( 'get_app_assets', APPS ), 'array_merge', [] ) );
$resolved_dependencies = resolve_wp_dependencies( $unresolved_dependencies );

foreach ( $resolved_dependencies as $dependency ) {
	echo $dependency . PHP_EOL;
}
